components:
  schemas:
    Building: 
      type: object
      properties:
        name:
          type: string
        address:
          type: string
      example:
        name: Building name
        address: Address
      
    Company:
      type: object
      properties:
        name:
          type: string
        buildingName:
          type: string
        ownedBuildings:
          type: array
          items: 
            type: object
            properties:
              buildingName:
                type: string
      example:
        name: Company name
        buildingName: Building name
        ownedBuildings: [{buildingName: 'Building name'}]
        
    Employee:
      type: object
      properties:
        name:
          type: string
        companyName:
          type: string
        buildingName:
          type: string
        accessLevels:
          type: array
          items: 
            type: object
            properties:
              accessLevel:
                type: string
      example:
        name: Employee name
        companyName: Company name
        buildingName: Building name
        accessLevels: [{accessLevel: 'Access level'}]

    AccessLevel:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string
        permissions:
          type: array
          items:
            type: object
            properties:
              resource: 
                type: string
              action:
                type: string
      example:
        name: Access level
        type: company
        description: Access level description
        permissions: [{resource: 'company', action: 'access'}]  

    AccessCard:
      type: object
      properties:
        cardNumber: 
          type: string
        cardHolder: 
          type: object
          properties:
            employeeId:
              type: string
        issued_at: 
          type: string
        valid_until: 
          type: string
        is_active: 
          type: boolean
      example:
        cardHolder: {employeeId: '66b9d457f5a21d2fbc76d240'}

    Config:
      type: object
      properties:
        key: 
          type: string
        value: 
          type: number
      example:
        key: 'key'
        value: 10

    Access: 
      type: object
      properties:
        accessCardId: 
          type: string
        companyId: 
          type: string
        buildingId: 
          type: string
        eventType: 
          type: string
          enum: ['login','read', 'access']
        resource: 
          type: array
          items:
            type: string
      example:
        accessCardId: '66b9d489fc714e07094d6dbd'
        companyId: '66b9bb32c6628e6d3a605eda'
        buildingId: '66b9bb2cc6628e6d3a605ed5'
        eventType: 'login'
        resource: ['company']

    AccessLog:
      type: object
      properties:
        accessCardId:
          type: string
        companyId:
          type: string
        buildingId:
          type: string
        eventType:
          type: string
          enum: ['login','logout','access']
        accessType: 
          type: string
          enum: ['company','building']
        timestamp:
          type: string
      example:
        accessCardId: '66b9d489fc714e07094d6dbd'
        companyId: '66b9bb32c6628e6d3a605eda'
        buildingId: '66b9bb2cc6628e6d3a605ed5'
        eventType: 'login'
        accessType: 'company'

  #   User:
  #     type: object
  #     properties:
  #       id:
  #         type: string
  #       email:
  #         type: string
  #         format: email
  #       name:
  #         type: string
  #       role:
  #         type: string
  #         enum: [user, admin]
  #     example:
  #       id: 5ebac534954b54139806c112
  #       email: fake@example.com
  #       name: fake name
  #       role: user

  #   Token:
  #     type: object
  #     properties:
  #       token:
  #         type: string
  #       expires:
  #         type: string
  #         format: date-time
  #     example:
  #       token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
  #       expires: 2020-05-12T16:18:04.793Z

  #   AuthTokens:
  #     type: object
  #     properties:
  #       access:
  #         $ref: '#/components/schemas/Token'
  #       refresh:
  #         $ref: '#/components/schemas/Token'

  #   UserWithTokens:
  #     type: object
  #     properties:
  #       user:
  #         $ref: '#/components/schemas/User'
  #       tokens:
  #         $ref: '#/components/schemas/AuthTokens'

  #   Error:
  #     type: object
  #     properties:
  #       code:
  #         type: number
  #       message:
  #         type: string

  # responses:
  #   DuplicateEmail:
  #     description: Email already taken
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Error'
  #         example:
  #           code: 400
  #           message: Email already taken
  #   Unauthorized:
  #     description: Unauthorized
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Error'
  #         example:
  #           code: 401
  #           message: Please authenticate
  #   Forbidden:
  #     description: Forbidden
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Error'
  #         example:
  #           code: 403
  #           message: Forbidden
  #   NotFound:
  #     description: Not found
  #     content:
  #       application/json:
  #         schema:
  #           $ref: '#/components/schemas/Error'
  #         example:
  #           code: 404
  #           message: Not found

  # securitySchemes:
  #   bearerAuth:
  #     type: http
  #     scheme: bearer
  #     bearerFormat: JWT